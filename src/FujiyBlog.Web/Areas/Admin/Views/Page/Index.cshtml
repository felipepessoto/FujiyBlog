@inject FujiyBlog.Core.DateTimeUtil DateTimeUtil

@using FujiyBlog.Core.DomainObjects
@using FujiyBlog.Core.Extensions

@model FujiyBlog.Web.Areas.Admin.ViewModels.AdminPageIndex

@{
    Layout = "_Layout";
    ViewBag.Title = FujiyBlog.Web.Resources.Labels.Pages;
}

<h2>@FujiyBlog.Web.Resources.Labels.Pages</h2>

@if (Context.UserHasClaimPermission(PermissionClaims.CreateNewPages))
{
    <p>
        <a asp-action="Edit" class="btn btn-secondary">Add new page</a>
    </p>
}

<ul class="nav nav-pills">
    <li class="@(Model.Published == null ? "active": null)"><a asp-action="Index" >All</a></li>
    <li class="@(Model.Published == false ? "active": null)"><a asp-action="Index" asp-route-published="false" >Drafts</a></li>
    <li class="@(Model.Published == true ? "active": null)"><a asp-action="Index" asp-route-published="true" >Published</a></li>
</ul>

@await Component.InvokeAsync("Pager", new { currentPage = Model.CurrentPage, totalPages = Model.TotalPages, nextPageText = FujiyBlog.Web.Resources.Labels.NextPosts, previousPageText = FujiyBlog.Web.Resources.Labels.PreviousPosts })

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th></th>
            <th>
                Published
            </th>
            <th>
                Title
            </th>
            <th>
                Show In List
            </th>
            <th>
                CreationDate
            </th>
            <th>
                PublicationDate
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Pages)
        {
            <tr id="item-row-@item.Id">
                <td>
                    @if ((item.Author.UserName == User.Identity.Name && Context.UserHasClaimPermission(PermissionClaims.EditOwnPages)) || Context.UserHasClaimPermission(PermissionClaims.EditOtherUsersPages))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-secondary">Edit</a>
                    }
                </td>
                <td class="@(item.IsPublished ? "published" : "notpublished")">
                    @Html.DisplayFor(modelItem => item.IsPublished)
                </td>
                <td>
                    @Html.ActionLink(item.Title, "Details", "Page", new { pageSlug = item.Slug })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ShowInList)
                </td>
                <td>
                    @DateTimeUtil.ConvertUtcToMyTimeZone(item.CreationDate)
                </td>
                <td>
                    @DateTimeUtil.ConvertUtcToMyTimeZone(item.PublicationDate)
                </td>
                <td>
                    @if ((item.Author.UserName == User.Identity.Name && Context.UserHasClaimPermission(PermissionClaims.DeleteOwnPages)) || (item.Author.UserName != User.Identity.Name && Context.UserHasClaimPermission(PermissionClaims.DeleteOtherUsersPages)))
                    {
                        <a asp-controller="Page" asp-action="Delete" asp-route-id="@item.Id" data-ajax="true" data-ajax-method="POST" data-ajax-confirm="Sure?" data-ajax-success="@("RemoveItemRow(" + item.Id + ");")" class="btn btn-danger">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<script type="text/javascript">
    function RemoveItemRow(itemId) {
        $('#item-row-' + itemId).hide();
    }

</script>

@await Component.InvokeAsync("Pager", new { currentPage = Model.CurrentPage, totalPages = Model.TotalPages, nextPageText = FujiyBlog.Web.Resources.Labels.NextPosts, previousPageText = FujiyBlog.Web.Resources.Labels.PreviousPosts })
