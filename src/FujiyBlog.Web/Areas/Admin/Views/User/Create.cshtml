@using FujiyBlog.Core.DomainObjects
@using FujiyBlog.Core.Extensions

@model FujiyBlog.Web.Areas.Admin.ViewModels.AdminUserCreate
@{
    Layout = "_Layout";
    bool canEditRoles = (Model.Username != User.Identity.Name && Context.UserHasClaimPermission(PermissionClaims.EditOtherUsersRoles)) || (Model.Username == User.Identity.Name && Context.UserHasClaimPermission(PermissionClaims.EditOwnRoles));
}
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>User</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Username)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Username)
            @Html.ValidationMessageFor(model => model.Username)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Password)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Password)
            @Html.ValidationMessageFor(model => model.Password)
            @Html.EditorFor(model => model.ConfirmPassword)
            @Html.ValidationMessageFor(model => model.ConfirmPassword)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Email)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.DisplayName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DisplayName)
            @Html.ValidationMessageFor(model => model.DisplayName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.FullName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FullName)
            @Html.ValidationMessageFor(model => model.FullName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.BirthDate)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.BirthDate)
            @Html.ValidationMessageFor(model => model.BirthDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Location)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Location)
            @Html.ValidationMessageFor(model => model.Location)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SelectedRoles)
        </div>
        <div class="editor-field">
            <ul id="categories-list">
            @foreach (var role in Model.AllRoles)
            {
                <li><input type="checkbox" name="SelectedRoles" value="@role.Name" @(Model.SelectedRoles.Any(x => x == role.Id) ? "checked=checked" : string.Empty) @(canEditRoles ? string.Empty : "disabled=disabled") />@role.Name</li>
            }
            </ul>
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.About)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.About)
            @Html.ValidationMessageFor(model => model.About)
        </div>
        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
