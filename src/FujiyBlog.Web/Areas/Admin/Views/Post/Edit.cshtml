@using FujiyBlog.Core.DomainObjects
@using FujiyBlog.Web.Extensions
@using FujiyBlog.Core.Extensions

@model FujiyBlog.Web.Areas.Admin.ViewModels.AdminPostEdit

@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Edit";
    string uploadFolder = "Post" + (Model.Post.Id.HasValue ? Model.Post.Id.ToString() : Guid.NewGuid().ToString());
}
<script type="text/javascript" src="~/lib/tinymce/jquery.tinymce.min.js" asp-append-version="true"></script>

@Html.Partial("UploadForms", uploadFolder)

@using (Html.BeginForm())
{
    <button class="btn btn-primary" type="submit">Save</button>
    <h2>@(Model.Post.Id.HasValue ? "Edit" : "Add") post</h2>

    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.Post.Id)

    <div class="row">

        <div class="col-xs-9">
            
            <div class="form-group">
                <label asp-for="Post.Title" class="control-label"></label>
                <input asp-for="Post.Title" class="form-control" placeholder="Title" />
                <span asp-validation-for="Post.Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Post.Slug" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="Post.Slug" class="form-control" placeholder="Slug" />
                    <span class="input-group-btn">
                        <a class="btn btn-primary" href="javascript:void(0)" id="extract-from-title">Extract from title</a>
                    </span>
                    <span asp-validation-for="Post.Slug" class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-1">
                    <a class="btn btn-default" href="javascript:void(0)" id="link-upload-image">Insert image</a>
                </div>
                <div class="col-xs-1">
                    <a class="btn btn-default" href="javascript:void(0)" id="link-upload-video">Insert video</a>
                </div>
                <div class="col-xs-1">
                    <a class="btn btn-default" href="javascript:void(0)" id="link-upload-file">Insert file</a>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12">
                    @Html.EditorFor(model => model.Post.Content, "TinyMCE")
                    <span asp-validation-for="Post.Content" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Post.Description" class="control-label"></label> (Optional)
                <textarea asp-for="Post.Description" class="form-control" maxlength="500"></textarea>
                <span asp-validation-for="Post.Description" class="text-danger"></span>
                <div id="textarea_feedback"></div>
            </div>


            <div class="checkbox">
                <label>
                    <input asp-for="Post.IsPublished" />@Html.DisplayNameFor(model => model.Post.IsPublished)
                </label>
                <span asp-validation-for="Post.IsPublished" class="text-danger"></span>
            </div>

            <div class="checkbox">
                <label>
                    <input asp-for="Post.IsCommentEnabled" />@Html.DisplayNameFor(model => model.Post.IsCommentEnabled)
                </label>
                <span asp-validation-for="Post.IsCommentEnabled" class="text-danger"></span>
            </div>



            <div class="form-group">
                <label asp-for="Post.ImageUrl" class="control-label"></label> (Optional)
                <input asp-for="Post.ImageUrl" class="form-control" />
                <span asp-validation-for="Post.Title" class="text-danger"></span>
            </div>


            <button class="btn btn-primary" type="submit">Save</button>
        </div>

        <div class="col-xs-3">

            <div class="form-group">
                <label asp-for="Post.AuthorId" class="control-label"></label>
                <select asp-for="Post.AuthorId" asp-items="Model.Authors" class="form-control"></select>
                <span asp-validation-for="Post.AuthorId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Post.PublicationDate" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="Post.PublicationDate" pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}" class="form-control" />
                </div>
                <span asp-validation-for="Post.PublicationDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Post.Categories" class="control-label"></label>
                <div id="categories-list">
                    @foreach (Category category in Model.AllCategories)
                    {
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" name="Post.selectedCategories" value="@category.Id" @(Model.Post.Categories.Any(x => x.Id == category.Id) ? "checked=checked" : string.Empty) />@category.Name
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <label for="new-category-name">Add new category</label>
                <div class="input-group">
                    <input type="text" id="new-category-name" class="form-control" />
                    <span class="input-group-btn">
                        <a href="javascript:void(0);" id="add-category" class="btn btn-primary">Add</a>
                    </span>
                </div>
                <span id="new-category-name-error" class="field-validation-error" style="display:none"></span>
            </div>


            <div class="form-group">
                <label asp-for="Post.Tags" class="control-label"></label>
                <textarea asp-for="Post.Tags" class="form-control"></textarea>
                Separate each tag with a comma
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    $(function() {
        var availableTags = @(Html.Raw(Model.AllTagsJson));

        function split(val) {
            return val.split( /,\s*/ );
        }

        function extractLast(term) {
            return split(term).pop();
        }

        $('#@(Html.IdFor(x=> x.Post.Tags))')
            // don't navigate away from the field on tab when selecting an item
            .bind("keydown", function(event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).data("autocomplete").menu.active) {
                    event.preventDefault();
                }
            })
            .autocomplete({
                minLength: 0,
                source: function(request, response) {
                    // delegate back to autocomplete, but extract the last term
                    response($.ui.autocomplete.filter(
                        availableTags, extractLast(request.term)));
                },
                focus: function() {
                    // prevent value inserted on focus
                    return false;
                },
                select: function(event, ui) {
                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
                }
            });


        var descriptionControl = $('#@Html.IdFor(x=>x.Post.Description)')

        var text_max = descriptionControl.prop("maxlength");

        function updateDescriptionCounter() {
            var text_length = descriptionControl.val().length;
            var text_remaining = text_max - text_length;

            $('#textarea_feedback').html(text_remaining + ' characters remaining');
        }

        updateDescriptionCounter();

        descriptionControl.on('change keyup input', updateDescriptionCounter);
    });

    function CheckPublishRoles () {

        var hasPublishOwn = @(Context.UserHasClaimPermission(PermissionClaims.PublishOwnPosts)?"true":"false");;
        var hasPublishOtherUsers = @(Context.UserHasClaimPermission(PermissionClaims.PublishOtherUsersPosts)?"true":"false");
        var userName = '@(User.Identity.Name)';
        var currentPublishedValue = @(Model.Post.Id.HasValue && Model.Post.IsPublished?"true":"false");

        var publishedField = $('#@(Html.IdFor(x=> x.Post.IsPublished))');
        var newAuthor = $('#@(Html.IdFor(x=> x.Post.AuthorId)) :selected').text();

        if (!currentPublishedValue) {
            if (!(newAuthor != userName && hasPublishOtherUsers) && !(newAuthor == userName && hasPublishOwn)) {
                publishedField.attr('disabled', true);
                publishedField.prop('checked', false);
            }
            else {
                publishedField.attr('disabled', false);
            }
        }
    }

    CheckPublishRoles();

    $('#@(Html.IdFor(x=> x.Post.AuthorId))').change(CheckPublishRoles);

    $('#add-category').click(function () {

        if ($('#new-category-name').val() === '') {
            return;
        }
        $('#new-category-name-error').text('').hide();
        var callUrl = '@Url.Action("AddCategory", "Post", new { area = "Admin" })';
        var callData = "NewCategory.Name=" + $('#new-category-name').val();
        $.ajax({
            type: "POST",
            url: callUrl,
            data: callData,
            success: function (response) {
                if (!response.errorMessage) {
                    var container = $('#categories-list');

                    var html = '<div class="checkbox"><label><input checked=checked type="checkbox" name="Post.selectedCategories" value="' + response.id + '" />' + response.name + '</label></div>';
                    container.append($(html));
                }
                else {
                    $('#new-category-name-error').text(response.errorMessage).show();
                }
            },
            error: function () {
                $('#new-category-name-error').text("Error").show();
            }
        });
    });

    $('#extract-from-title').click(function() {
        var callUrl = '@Url.Action("GenerateSlug", "Page", new { area="Admin"})';
        var postData = { text: $('#@Html.IdFor(x=>x.Post.Title)').val() };

        $.ajax({
            type: "POST",
            url: callUrl,
            data: postData,
            success: function(response) {
                $('#@Html.IdFor(x=>x.Post.Slug)').val(response);
            },
            error: function() {
                alert('Error');
            }
        });
    });
</script>
