@using FujiyBlog.Core.DomainObjects
@using FujiyBlog.Web.Extensions
@using FujiyBlog.Core.Extensions

@model FujiyBlog.Web.Areas.Admin.ViewModels.AdminPostEdit

@{
    Layout = MVC.Admin.Shared.Views._Layout;
    ViewBag.Title = "Edit";
}
<script type="text/javascript" src="@Url.Content(Links.Scripts.tinymce_3_4_5.jquery_tinymce_js)"></script>
<script type="text/javascript" src="@Url.Content(Links.Scripts.jquery_form_js)"></script>

<h2>@(Model.Post.Id.HasValue ? "Edit" : "Add") post</h2>

<div id="div-upload-image" style="display: none;">
    <form id="form-upload-image" action="@Url.Action(MVC.Admin.File.Upload(null, "Post" + Model.Post.Id))" method="post" enctype="multipart/form-data">
        <fieldset>
            <legend>Upload a image</legend>
            <label>File to Upload: <input type="file" name="uploadFile" accept="image/*" />(4MB max size)</label>
            <input class="ajaxUploadButton" type="submit" value="Submit" />
        </fieldset>
    </form>
</div>

<div id="div-upload-video" style="display: none;">
    <form id="form-upload-video" action="@Url.Action(MVC.Admin.File.Upload(null, "Post" + Model.Post.Id))" method="post" enctype="multipart/form-data">
        <fieldset>
            <legend>Upload a video/audio</legend>
            <label>File to Upload: <input type="file" name="uploadFile" accept="audio/*,video/*" />(4MB max size)</label>
            <input class="ajaxUploadButton" type="submit" value="Submit" />
        </fieldset>
    </form>
</div>

<div id="div-upload-file" style="display: none;">
    <form id="form-upload-file" action="@Url.Action(MVC.Admin.File.Upload(null, "Post" + Model.Post.Id))" method="post" enctype="multipart/form-data">
        <fieldset>
            <legend>Upload a file</legend>
            <label>File to Upload: <input type="file" name="uploadFile" />(4MB max size)</label>
            <input class="ajaxUploadButton" type="submit" value="Submit" />
        </fieldset>
    </form>
</div>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Post</legend>

        @Html.HiddenFor(model => model.Post.Id)

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.Title)
            @Html.ValidationMessageFor(model => model.Post.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.AuthorId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(x => x.Post.AuthorId, Model.Authors)
            @Html.ValidationMessageFor(model => model.Post.AuthorId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Description)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.Description)
            @Html.ValidationMessageFor(model => model.Post.Description)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Slug)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.Slug) <a href="javascript:void(0)" id="extract-from-title">Extract from title</a>
            @Html.ValidationMessageFor(model => model.Post.Slug)
        </div>

        <div class="upload-links">
            <a href="javascript:void(0)" id="link-upload-image">Insert image</a>
            <a href="javascript:void(0)" id="link-upload-video">Insert video</a>
            <a href="javascript:void(0)" id="link-upload-file">Insert file</a>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Content)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.Content)
            @Html.ValidationMessageFor(model => model.Post.Content)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.PublicationDate)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.PublicationDate)
            @Html.ValidationMessageFor(model => model.Post.PublicationDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.IsPublished)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.IsPublished)
            @Html.ValidationMessageFor(model => model.Post.IsPublished)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.IsCommentEnabled)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Post.IsCommentEnabled)
            @Html.ValidationMessageFor(model => model.Post.IsCommentEnabled)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Categories)
        </div>
        <div class="editor-field">
            <ul id="categories-list">
            @foreach (Category category in Model.AllCategories)
            {
                <li><input type="checkbox" name="Post.selectedCategories" value="@category.Id" @(Model.Post.Categories.Any(x=>x.Id == category.Id) ? "checked=checked" : string.Empty) />@category.Name</li>
            }
            </ul>
        </div>

        <label for="new-category-name">Add new category</label>
        <input type="text" id="new-category-name" />
        <span id="new-category-name-error" class="field-validation-error" style="display:none"></span>
        
        <a href="javascript:void(0);" id="add-category">Add</a>

        <div class="editor-label">
            @Html.LabelFor(model => model.Post.Tags)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Post.Tags)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">

    function CheckPublishRoles () {
        
        var hasPublishOwn = @(User.IsInRole(Role.PublishOwnPosts)?"true":"false");;
        var hasPublishOtherUsers = @(User.IsInRole(Role.PublishOtherUsersPosts)?"true":"false");
        var userName = '@(User.Identity.Name)';
        var currentPublishedValue = @(Model.Post.Id.HasValue && Model.Post.IsPublished?"true":"false");

        var publishedField = $('#@(Html.FieldIdFor(x=> x.Post.IsPublished))');
        var newAuthor = $('#@(Html.FieldIdFor(x=> x.Post.AuthorId)) :selected').text();
        
        if (!currentPublishedValue) {
            if (!(newAuthor != userName && hasPublishOtherUsers) && !(newAuthor == userName && hasPublishOwn)) {
                publishedField.attr('disabled', true);
                publishedField.prop('checked', false);
            }
            else {
                publishedField.attr('disabled', false);
            }
        }
    }
    
    CheckPublishRoles();
    
    $('#@(Html.FieldIdFor(x=> x.Post.AuthorId))').change(CheckPublishRoles);

    $('#add-category').click(function () {

        if ($('#new-category-name').val() === '') {
            return;
        }
        $('#new-category-name-error').text('').hide();
        var callUrl = '@Url.Action(MVC.Admin.Post.AddCategory())';
        var callData = "NewCategory.Name=" + $('#new-category-name').val();
        $.ajax({
            type: "POST",
            url: callUrl,
            data: callData,
            success: function (response) {
                if (!response.errorMessage) {
                    var container = $('#categories-list');

                    var html = '<li><input checked=checked type="checkbox" name="Post.selectedCategories" value="' + response.Id + '" />' + response.Name + '</li>';
                    container.append($(html));
                }
                else {
                    $('#new-category-name-error').text(response.errorMessage).show();
                }
            },
            error: function () {
                $('#new-category-name-error').text("Error").show();
            }
        });
    });

    var tinymceContent = null;
    $().ready(function () {
        tinymceContent = $('#Post_Content').tinymce({
            // Location of TinyMCE script
            script_url: '@(Url.Content(Links.Scripts.tinymce_3_4_5.tiny_mce_js))',

            // General options
            theme: "advanced",
            plugins: "media,inlinepopups,fullscreen,contextmenu,emotions,table,iespell,advlink",
            relative_urls: false,

            // Theme options
            theme_advanced_buttons1: "fullscreen,code,|,cut,copy,paste,pastetext,pasteword,|,undo,redo,|,bold,italic,underline,strikethrough,|,blockquote,sub,sup,|,justifyleft,justifycenter,justifyright,|,bullist,numlist,outdent,indent",
            theme_advanced_buttons2: "link,unlink,removeformat,cleanup,charmap,emotions,|,formatselect,fontselect,fontsizeselect,|,forecolor,backcolor",
            theme_advanced_buttons3: '',
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true
        });
    });

    $('#extract-from-title').click(function() {
        var callUrl = '@(Url.Action(MVC.Admin.Page.GenerateSlug()))';
        var postData = JSON.stringify({ text: $('#@Html.FieldIdFor(x=>x.Post.Title)').val() });

        $.ajax({
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                url: callUrl,
                data: postData,
                success: function(response) {
                    $('#@Html.FieldIdFor(x=>x.Post.Slug)').val(response);
                },
                error: function() {
                    alert('Error');
                }
            });
    });

    var currentDialog = null;

    function openUploadDiv(divId) {

        var uploadDiv = $('#' + divId);
        $('input:file', uploadDiv).attr({ value: '' });

        if (currentDialog) {
            currentDialog.dialog('close');
        }

        currentDialog = uploadDiv.dialog({ height: 200,
            width: 550,
            modal: true,
            overlay: { opacity: 0.7, background: 'black' }
        });
    }

    $('#link-upload-image').click(function () {
        openUploadDiv('div-upload-image');
    });

    $('#link-upload-video').click(function () {
        openUploadDiv('div-upload-video');
    });

    $('#link-upload-file').click(function () {
        openUploadDiv('div-upload-file');
    });

    $("#form-upload-image,#form-upload-video,#form-upload-file").ajaxForm({
        iframe: true,
        dataType: "json",
        beforeSubmit: function () {
            $('.ajaxUploadButton').attr('disabled', 'disabled');
        },
        success: function (response, statusText, xhr, elem) {
            $('.ajaxUploadButton').removeAttr('disabled');
            if (response.errorMessage) {
                alert(response.errorMessage);
            }
            else {
                var insertedContent = null;
                if (elem.attr('id') === 'form-upload-image') {
                    insertedContent = '<img src="' + response.url + '" />';
                }
                else if (elem.attr('id') === 'form-upload-video') {
                    insertedContent = '<video controls="controls" src="' + response.url + '"></video>';
                }
                else if (elem.attr('id') === 'form-upload-file') {
                    insertedContent = '<a href="' + response.url + '">' + response.url.substr(response.url.lastIndexOf('/') + 1) + '</a>';
                }

                tinymceContent.tinymce().execCommand('mceInsertContent', false, insertedContent);

                if (currentDialog) {
                    currentDialog.dialog('close');
                }
            }
        },
        error: function (xhr, textStatus, errorThrown) {
            $('.ajaxUploadButton').removeAttr('disabled');
            alert('Error uploading file');
        }
    });
    
</script>
